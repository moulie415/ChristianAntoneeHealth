name: iOS

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      run_number:
        type: string
        required: true

jobs:
  deploy:
    runs-on: macos-14

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
          cache: 'yarn'
      - uses: actions/cache@v3
        id: yarn-ios-cache
        with:
          path: node_modules
          key: ${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          yarn
      - uses: actions/cache@v3
        id: pod-cache
        with:
          path: ios/Pods
          key: ${{ hashFiles('ios/podfile.lock') }}
      - name: Create .env
        env:
          REVENUE_CAT_IOS_KEY: ${{ secrets.REVENUE_CAT_IOS_KEY }}
          REVENUE_CAT_ANDROID_KEY: ${{ secrets.REVENUE_CAT_ANDROID_KEY }}
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
          FACEBOOK_CLIENT_TOKEN: ${{ secrets.FACEBOOK_CLIENT_TOKEN }}
          ROOT_API_URL: ${{ secrets.ROOT_API_URL }}
          PRIVACY_POLICY: ${{ secrets.PRIVACY_POLICY }}
          TERMS_AND_CONDITIONS: ${{ secrets.TERMS_AND_CONDITIONS }}
        run: |
          echo REVENUE_CAT_IOS_KEY=$REVENUE_CAT_IOS_KEY >> .env
          echo REVENUE_CAT_ANDROID_KEY=$REVENUE_CAT_ANDROID_KEY >> .env
          echo FACEBOOK_APP_ID=$FACEBOOK_APP_ID >> .env
          echo INSTABUG_DEV_TOKEN=$INSTABUG_DEV_TOKEN >> .env
          echo INSTABUG_PROD_TOKEN=$INSTABUG_PROD_TOKEN >> .env
          echo ROOT_API_URL=$ROOT_API_URL >> .env
          echo PRIVACY_POLICY=$PRIVACY_POLICY >> .env
          echo TERMS_AND_CONDITIONS=$TERMS_AND_CONDITIONS >> .env
          echo -n FACEBOOK_CLIENT_TOKEN=$FACEBOOK_CLIENT_TOKEN >> .env
      - name: Install certificates
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_P12_DATA_DEV: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA_DEV }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_PATH_DEV=$RUNNER_TEMP/build_certificate_dev.p12

          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$SIGNING_CERTIFICATE_P12_DATA" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$SIGNING_CERTIFICATE_P12_DATA_DEV" | base64 --decode -o $CERTIFICATE_PATH_DEV

          # create temporary keychain
          security create-keychain -p "" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH_DEV -P "" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Import provisisioning profiles
        env:
          PROVISIONING_PROFILE_DATA: ${{ secrets.PROVISIONING_PROFILE_DATA }}
          PROVISIONING_PROFILE_DATA_DEV: ${{ secrets.PROVISIONING_PROFILE_DATA_DEV }}
          WATCH_APP_PROVISIONING_PROFILE_DATA: ${{ secrets.WATCH_APP_PROVISIONING_PROFILE_DATA }}
          WATCH_APP_PROVISIONING_PROFILE_DATA_DEV: ${{ secrets.WATCH_APP_PROVISIONING_PROFILE_DATA_DEV }}
          WATCH_APP_EXTENSION_PROVISIONING_PROFILE_DATA: ${{ secrets.WATCH_APP_EXTENSION_PROVISIONING_PROFILE_DATA }}
          WATCH_APP_EXTENSION_PROVISIONING_PROFILE_DATA_DEV: ${{ secrets.WATCH_APP_EXTENSION_PROVISIONING_PROFILE_DATA_DEV }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$WATCH_APP_PROVISIONING_PROFILE_DATA" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profileWatch.mobileprovision
          echo "$WATCH_APP_EXTENSION_PROVISIONING_PROFILE_DATA" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profileWatchExtension.mobileprovision
          echo "$WATCH_APP_PROVISIONING_PROFILE_DATA_DEV" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profileWatchDev.mobileprovision
          echo "$WATCH_APP_EXTENSION_PROVISIONING_PROFILE_DATA_DEV" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profileWatchExtensionDev.mobileprovision
          echo "$PROVISIONING_PROFILE_DATA" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          echo "$PROVISIONING_PROFILE_DATA_DEV" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profileDev.mobileprovision
      - name: Set up prod environment
        env:
          GOOGLE_SERVICE_INFO: ${{ secrets.GOOGLE_SERVICE_INFO }}
        run: |
          cd ios/HealthAndMovement
          echo $GOOGLE_SERVICE_INFO >> GoogleService-Info.plist
      - uses: yanamura/ios-bump-version@v1.7.0
        with:
          build-number: ${{inputs.run_number}}
          version: ${{inputs.version}}
          project-path: ios #Example for React Native project
      - name: Pod install
        run: |
          cd ios
          pod install
      - name: Build app
        run: |
          cd ios
          xcodebuild clean -workspace HealthAndMovement.xcworkspace -scheme HealthAndMovement
          xcodebuild build -workspace HealthAndMovement.xcworkspace -scheme HealthAndMovement -destination 'generic/platform=iOS'
          xcodebuild archive -workspace HealthAndMovement.xcworkspace -scheme HealthAndMovement -archivePath archive.xcarchive
          xcodebuild -exportArchive -archivePath archive.xcarchive -exportPath . -exportOptionsPlist exportOptions.plist
      - name: Upload app to App Store Connect
        env:
          APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
        run: |
          xcrun altool --upload-app -t ios -f "ios/CA Health.ipa" -u "$APP_STORE_CONNECT_USERNAME" -p "$APP_STORE_CONNECT_PASSWORD"
      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        with:
          version: latest # optional if 'latest'
          token: ${{ SECRETS.SENTRY_TOKEN }} # from GitHub secrets
          organization: henry-moule
          project: health-and-movement
      - name: Upload dSYM to Sentry
        env:
          SENTRY_TOKEN: ${{ secrets.SENTRY_TOKEN }}
        run: |
          ls
          DSYM=$(find ios/archive.xcarchive/dSYMs -name "*.dSYM")
          echo $DSYM
          ls
          sentry-cli --auth-token $SENTRY_TOKEN upload-dif --org henry-moule --project health-and-movement $DSYM
          # ios/Pods/FirebaseCrashlytics/upload-symbols -gsp ios/HealthAndMovement/GoogleService-Info.plist -p ios $DSYM
